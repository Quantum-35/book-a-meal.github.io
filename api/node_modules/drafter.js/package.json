{
  "_args": [
    [
      {
        "raw": "drafter.js@^2.6.0",
        "scope": null,
        "escapedName": "drafter.js",
        "name": "drafter.js",
        "rawSpec": "^2.6.0",
        "spec": ">=2.6.0 <3.0.0",
        "type": "range"
      },
      "/Users/quantumcomputing/Movies/Andela/AndelaProject/realChallangeProject/AndelaChallenge/book-a-meal.github.io/api/node_modules/drafter"
    ]
  ],
  "_from": "drafter.js@>=2.6.0 <3.0.0",
  "_id": "drafter.js@2.6.7",
  "_inCache": true,
  "_location": "/drafter.js",
  "_nodeVersion": "4.8.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/drafter.js-2.6.7.tgz_1496151644736_0.5136205838061869"
  },
  "_npmUser": {
    "name": "apiary-sre",
    "email": "sre@apiary.io"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "drafter.js@^2.6.0",
    "scope": null,
    "escapedName": "drafter.js",
    "name": "drafter.js",
    "rawSpec": "^2.6.0",
    "spec": ">=2.6.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/drafter"
  ],
  "_resolved": "https://registry.npmjs.org/drafter.js/-/drafter.js-2.6.7.tgz",
  "_shasum": "59c43a8586527340cb35bddc54180559faeef001",
  "_shrinkwrap": null,
  "_spec": "drafter.js@^2.6.0",
  "_where": "/Users/quantumcomputing/Movies/Andela/AndelaProject/realChallangeProject/AndelaChallenge/book-a-meal.github.io/api/node_modules/drafter",
  "author": {
    "name": "Apiary"
  },
  "browser": {
    "ws": false
  },
  "bugs": {
    "url": "https://github.com/apiaryio/drafter.js/issues"
  },
  "dependencies": {},
  "description": "Pure JS Drafter built with Emscripten",
  "devDependencies": {
    "async": "^1.4.2",
    "chai": "^3.3.0",
    "chalk": "^1.1.1",
    "diff": "^2.1.3",
    "glob": "^5.0.15",
    "mkdirp": "^0.5.1",
    "umd": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "59c43a8586527340cb35bddc54180559faeef001",
    "tarball": "https://registry.npmjs.org/drafter.js/-/drafter.js-2.6.7.tgz"
  },
  "engines": {
    "node": ">= 0.12"
  },
  "homepage": "https://github.com/apiaryio/drafter.js",
  "license": "MIT",
  "main": "lib/drafter.nomem.js",
  "maintainers": [
    {
      "name": "apiary-sre",
      "email": "sre@apiary.io"
    },
    {
      "name": "danielgtaylor",
      "email": "danielgtaylor@gmail.com"
    },
    {
      "name": "kylef",
      "email": "kyle@fuller.li"
    },
    {
      "name": "pksunkara",
      "email": "pavan.sss1991@gmail.com"
    },
    {
      "name": "zdne",
      "email": "z@apiary.io"
    }
  ],
  "name": "drafter.js",
  "optionalDependencies": {},
  "readme": "![logo](https://raw.github.com/apiaryio/api-blueprint/master/assets/logo_apiblueprint.png)\n\n# drafter.js [![Circle CI](https://circleci.com/gh/apiaryio/drafter.js/tree/master.svg?style=shield)](https://circleci.com/gh/apiaryio/drafter.js/tree/master)\n\nSnowcrash parser harness\n\n`drafter.js` is a pure JavaScript version of the `drafter` library. It exposes\na single `parse` function which takes an API Blueprint string and options as\ninput and returns the parse result. It is built from the C++ sources using\n[emscripten](http://kripken.github.io/emscripten-site/). It's API compatible\nwith [Protagonist](https://github.com/apiaryio/protagonist), the Drafter Node\nbinding.\n\n## Installation\n\ndrafter.js can be installed from NPM, or it can be downloaded from the [releases\npage](https://github.com/apiaryio/drafter.js/releases).\n\n**NOTE:** If you're using Node, we recommend that you use the [Drafter\nNPM](https://github.com/apiaryio/drafter-npm) package instead of drafter.js\ndirectly. Drafter NPM will attempt to install the pure C++ parser and fallback\nto using drafter.js.\n\n```shell\n$ npm install drafter.js\n```\n\n## Usage\n\n### Node\n\nIf you've installed drafter.js via NPM and using drafter.js in Node, you can\nrequire it via:\n\n```javascript\nvar drafter = require('drafter.js')\n```\n\n*Node versions supported*: >=0.12\n\nIt works on 0.10 too but without any guarantees and expect it to be\nsignificantly slower.\n\n### Web Browser\n\nIf instead, you are using drafter.js in a Browser. You can include it via the\nHTML script tag.\n\n```html\n<script src=\"./drafter.js\"></script>\n<script src=\"./drafter.js.mem\"></script>\n```\n\n### API\n\nOnce you've included drafter.js, you can parse an API Blueprint:\n\n```javascript\n\nvar res = drafter.parse('# API Blueprint...', {generateSourceMap: true}, function (err, res) {\n    if (err) {\n        console.log(err)\n    }\n    console.log(res);\n});\n\n```\n\n\nSupported options:\n\n- `generateSourceMap`: Set to export sourcemap information.\n- `json`: Set to `false` to disable parsing of the JSON data. You will\n  instead get a JSON string as the result.\n- `requireBlueprintName`: Set to generate an error if the blueprint is\n  missing a title.\n- `type`: Either `refract` (default) or `ast`.\n\nOr if you want just to validate it and are insterested only in parsing\nerrors and warnings:\n\n```javascript\nvar res = drafter.validate('# API Blueprint...', {requireBlueprintname: true}, function (err, res) {\n    if (err) {\n        console.log(err)\n    }\n\n    if (res) {\n        console.log(\"Document has semantic issues!\");\n        console.log(res);\n    } else {\n        console.log(\"Document is valid with no warnings.\");\n    }\n});\n```\n\nSupported options:\n\n- `json`: Set to `false` to disable parsing of the JSON data. You will\n  instead get a JSON string as the result.\n- `requireBlueprintName`: Set to generate an error if the blueprint is\n  missing a title.\n\n### Note\n\nThese are not a real async API calls - their presence is merely for API compatibility\nwith [protagonist](https://github.com/apiaryio/protagonist)\n\n#### Synchronous API\n\nBoth functions have their synchronous counterpart which instead of callback return the result and in case of error throw exception.\n\n- `parseSync(source, options)`\n- `validateSync(source, options)`\n\n### Build drafter.js\n\nUnfortunately building drafter.js works only on a *nix environment at the\nmoment.\n\n1. Building is easy using [Docker](https://www.docker.com/).\n\n2. Build\n\n    ```shell\n    $ ./scripts/wrap.js\n    $ docker pull \"apiaryio/emcc:1.36\"\n    $ docker run -v $(pwd):/src -t apiaryio/emcc:1.36 emcc/emcbuild.sh\n    ```\n    or with `npm`\n    ```shell\n    $ npm run build\n    ```\n\n3. Check out the `./scripts/test.js` and `./scripts/test.html` files for\n   example usage. You can also use `npm install` and then `npm test` to run the\n   tests.\n\nThe resulting stand-alone library `drafter.js` is in the `./lib` directory.\nDon't forget to serve the `drafter.js.mem` file as it is required by\n`drafter.js`. There is also a single-file version in `drafter.nomem.js` that\ncan be used, but it may take longer to load in a web browser\nenvironment. It is the default for node.js enviroment.\n\nTo get a debug version or version enabled to be used with `emrun` run\nthe `emcbuild.sh` script it with `-d` or `-e` respectively.\n\n#### Squeeze the size\n\nIf you want to squeeze the size to a minimum install\n[uglify-js](https://github.com/mishoo/UglifyJS2) and try running\n`uglifyjs lib/drafter.js -o drafter.js -c;`, this will use\n`uglify-js` with compression, beware that this might cause some\nerrors, if you encounter them try `drafter.js` without it to verify\nthat it is caused by `uglify-js` and report it please.\n\n## License\nMIT License. See the [LICENSE](https://github.com/apiaryio/drafter.js/blob/master/LICENSE) file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apiaryio/drafter.js.git"
  },
  "scripts": {
    "build": "./scripts/wrap.js && docker run --rm -v $(pwd):/src -t apiaryio/emcc:1.36 scripts/emcbuild.sh",
    "clean": "docker run --rm -v $(pwd):/src -t apiaryio/emcc:1.36 scripts/emcclean.sh",
    "release": "scripts/release.sh",
    "test": "node scripts/test.js && node scripts/test-validate.js"
  },
  "types": "./drafter.d.ts",
  "version": "2.6.7"
}
